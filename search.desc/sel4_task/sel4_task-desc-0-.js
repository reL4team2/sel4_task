searchState.loadedDescShard("sel4_task", 0, "This crate provides task management for seL4, including …\nThe state of a thread\nActivate the current thread.\nAdd the given priority level to the ready queue bitmap.\nCreate the idle thread.\nDomain ID.\nStruct representing a domain schedule.\nCheck if the queue is empty\nAppend a tcb to the queue\nDequeue a tcb from the queue\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the current thread, and returns a mutable tcb …\nGet the current thread, and returns a mutable tcb …\nGet the current domain.\nGet the idle thread, and returns a mutable tcb reference …\nGet the action to be taken by ks scheduler.\nGet the state of the thread\nThe head of the queue\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the given priority level is the highest priority …\nLength of the domain schedule.\nStructure for the return value of lookupSlot_raw\nStructure for the return value of lookupSlot\nSchedule the given tcb when current tcb is not in the same …\nGet the index of the ready queue for the given domain and …\nRemove the given priority level from the ready queue …\nReschedule threads, and enqueue the current thread if …\nSchedule threads.\nSchedule the given tcb.\nSet the action to be taken by current scheduler.\nSet the current thread.\nSet the action to be taken by ks scheduler.\nThe slot that was looked up\nThe slot that was looked up\nThe status of the operation\nThe status of the operation\nThe tail of the queue\nStructure for the tcb queue\nSchedule current thread if time slice is expired.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBind the notification of the TCB\nCopy the exception fault messages of the TCB to the …\nCopy the falut messages and ipc buffer(if valid) of the …\nCopy the falut messages for reply and ipc buffer(if valid) …\nCopy the message registers and ipc buffer(if valid) of the …\nCopy the syscall fault messages of the TCB to the receiver\nDelete the caller cap of the TCB\nThe domain of the TCB\nReturns the argument unchanged.\nGet the CPU of the TCB, 0 if not in SMP, tcbAffinity if in …\nGet i th cspace of the TCB, unmutable reference\nGet i th cspace of the TCB, mutable reference\nGet the pointer of the TCB\nGet the receive slot of the TCB\nGet the scheduling queue by index from ksReadyQueues\nGet the current state of the TCB\nInitialize the TCB\nCalls <code>U::from(self)</code>.\nCheck if the TCB is current by comparing the tcb pointer\nCheck if the TCB is runnable by checking the state\nCheck if the TCB is stopped by checking the state\nLook up the extra caps of the TCB\nLook up the extra caps of the TCB with IPC buffer\nLook up the IPC buffer of the TCB\nAs same as <code>lookup_ipc_buffer</code>, but the result is mutable …\nLook up the slot of the TCB\nRestart the TCB, set the state to ThreadStateRestart and …\nAppend the TCB to the scheduling queue tail\nDequeue the TCB from the scheduling queue\nEnqueue the TCB to the scheduling queue\nSet the domain of the TCB.\nSet the fault message registers of the TCB to the receiver\nSet the lookup fault to the msg registers of the TCB\nExamples\nSet the message info register of the TCB\nSet the priority of the TCB, and reschedule if the thread …\nSet the thread state of the TCB\nSet the VM root of the TCB\nSetup the caller cap of the TCB\nSetup the reply master of the TCB\nSusupend the TCB, set the state to ThreadStateInactive and …\nSwitch to the TCB(set current thread to self)\nThe architecture registers of the TCB\nThe bound notification of the TCB\nThe next TCB in the EP queue\nThe previous TCB in the EP queue\nThe fault of the TCB\nThe falut handler of the TCB\nThe IPC buffer of the TCB\nThe lookup fault of the TCB\nThe maximum controlled priority of the TCB\nThe priority of the TCB\nThe next TCB in the scheduling queue\nThe previous TCB in the scheduling queue\nThe state of the TCB\nThe time slice of the TCB\nStructure for the TCB\nUnbind the notification of the TCB(just set the bound …")